export default defineEventHandler(async (event) => {
  const config = useRuntimeConfig()
  const body = await readBody(event)

  const {
    name,
    role,
    otherRole,
    brandName,
    hasLogo,
    industry,
    selectedServices,
    otherService,
    preferredTime,
    phone
  } = body

  // Translation mappings for Russian
  const roleTranslations = {
    owner: '–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏',
    marketer: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É',
    starter: '–ß–µ–ª–æ–≤–µ–∫, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
    other: otherRole
  }

  const serviceTranslations = {
    registration: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–µ–Ω–¥–∞',
    protection: '–ó–∞—â–∏—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±—Ä–µ–Ω–¥–∞',
    recovery: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É –±—Ä–µ–Ω–¥–∞',
    branding: '–ë—Ä–µ–Ω–¥–∏–Ω–≥ –∏ –¥–∏–∑–∞–π–Ω',
    other: otherService
  }

  const timeTranslations = {
    morning: '–£—Ç—Ä–æ (09:00‚Äì12:00)',
    afternoon: '–ü–æ—Å–ª–µ –æ–±–µ–¥–∞ (12:00‚Äì17:00)',
    evening: '–í–µ—á–µ—Ä–æ–º (17:00‚Äì20:00)'
  }

  // Format services list
  const formattedServices = selectedServices
    .map(s => serviceTranslations[s] || s)
    .join('\n‚Ä¢ ')

  // Format the message for Telegram
  const message = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ PatentLab*

üë§ *–ò–º—è:* ${name}

üíº *–†–æ–ª—å:* ${roleTranslations[role] || role}

üè¢ *–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:* ${brandName}

üé® *–ï—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø:* ${hasLogo === 'yes' ? '–î–∞' : '–ù–µ—Ç'}

üè≠ *–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:* ${industry}

üìã *–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —É—Å–ª—É–≥–∏:*
‚Ä¢ ${formattedServices}

‚è∞ *–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —Å–≤—è–∑–∏:* ${timeTranslations[preferredTime] || preferredTime}

üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}

‚è± *–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:* ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Tashkent' })}
  `.trim()

  try {
    // Send message to Telegram
    const telegramResponse = await $fetch(
      `https://api.telegram.org/bot${config.telegramBotToken}/sendMessage`,
      {
        method: 'POST',
        body: {
          chat_id: config.telegramChatId,
          text: message,
          parse_mode: 'Markdown'
        }
      }
    )

    return {
      success: true,
      message: 'Form submitted successfully'
    }
  } catch (error) {
    console.error('Error sending to Telegram:', error)
    throw createError({
      statusCode: 500,
      statusMessage: 'Failed to send form data'
    })
  }
})
